[alias]
	# Shorthand for add
	a = add
	# Add all unstaged (including untracked) files.
	# See`git help add`
	aa = add --all
	ac = !git add . && git commit -am
	amend = commit --amend --reuse-message=HEAD
	c = commit -m                     # commit with message
	ca = commit -am                   # commit all with message
	# ============================ Branch
	# list branches sorted by last modified
	b = "!git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:short)%09%(refname)' refs/heads | sed -e 's-refs/heads/--'"
	cb = branch --show-current
	# ============================ Merge
	# Shorthand for merge
	m = merge
	# ============================Grabbing
	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"
	# Shorthand for fetch
	f = fetch
	# grab a change from a branch
	cp = cherry-pick -x
	# pull
	pl = pull
	# push
	ps = push
	# Create a new remote branch with the same name and track it.
	# First argument is remote name. Defaults to "origin".
	# Second, third and fourth argument are passed to `git push`.
	publish = "!p() { [ -z \"$1\" ] && remote=\"origin\" || remote=$1; git push --set-upstream $2 $3 $4 $remote HEAD; }; p"
	# Shorthand for remote (verbose)
	r = remote -v
	# ============================Status
	s = status -s
	st = status
	co = checkout
	cob = checkout -b
	# List aliases
	aliases = ! git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ /
	la = "!git config -l | grep alias | cut -c 7-"
	#=============================Stash
	# stash
	ss = stash                        # stash changes
	sl = stash list                   # list stashes
	sa = stash apply                  # apply stash (restore changes)
	sd = stash drop                   # drop stashes (destory changes)
	# ============================Diff
	# diff
	d = diff                          # diff unstaged changes
	dc = diff --cached                # diff staged changes
	da = diff HEAD                # diff unstaged and staged changes
	# Show all conflicted files
	diff-conflicted-files = diff --name-only --diff-filter=U
	# `git diff-to-x-commit $number` shows the diff between the state `$number` revisions ago and the current state
	diff-to-x-commit = "!d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	# ============================Other
	contributors = shortlog --summary --numbered
	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" --reuse-message=HEAD; }; f"
	hist = "log --pretty=format:'%C(yellow)[%ad]%C(reset) %C(green)[%h]%C(reset) | %C(red)%s %C(bold red){{%an}}%C(reset) %C(blue)%d%C(reset)' --graph --date=short"
	l = log --graph --decorate --pretty=oneline --abbrev-commit -n 10
	ll = log --graph --decorate --pretty=oneline --abbrev-commit --all
	lll = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
	changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
	short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
	overview = log --all --oneline --no-merges
	changelog = "!sh -c \"git log --oneline --no-merges $1..HEAD\" -"
	filelog = log -u # show changes to a file
	log-origin-main = log --decorate --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an - %aE>%Creset' --abbrev-commit --no-merges origin/main
	# last commit
	last = log -1 HEAD
	# ==============================Find
	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"
	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"
	# find a string in the entire git history
	search-git-history = "!r() { git rev-list --all | xargs git grep -F $1; }; r"
	#find all direct children of given refs
	#code borrowed from https://gist.github.com/kohsuke/7590246
	child = "!f() { for arg in \"$@\"; do for commit in $(git rev-parse $arg^0); do for child in $(git log --format='%H %P' --all | grep -F \" $commit\" | cut -f1 -d' '); do git describe $child 2> /dev/null || 	echo $child; done; done; done; }; f"
	alias = ! git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ /
	ddiff = diff develop HEAD
	lg = log --graph --oneline --decorate
[pull]
	rebase = true
[init]
	defaultBranch = master
[user]
	name = nall
	email = alexey.nikiforovall@gmail.com
[credential "https://github.com"]
	helper = 
	helper = !/usr/bin/gh auth git-credential
[credential "https://gist.github.com"]
	helper = 
	helper = !/usr/bin/gh auth git-credential
